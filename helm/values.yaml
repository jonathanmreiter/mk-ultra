image:
  repository: datadog/agent
  tag: 6.10.1
  pullPolicy: IfNotPresent

nameOverride: ""
fullnameOverride: ""

datadog:
  # TODO: Refer to some secret builder or secrets.yaml
  apiKey: foo
  appKey: bar

  name: datadog

  # TODO: Parameterize
  logLevel: INFO

  # TODO: Handle all tagging et al, probably as template
  # podLabelsAsTags:
  # podAnnotationsAsTags:
  # tags:

  useCriSocketVolume: true
  dogstatsdOriginDetection: true
  useDogStatsDSocketVolume: true
  collectEvents: true
  leaderElection: true
  leaderLeaseDuration: 60

  # TODO: Parameterize Logging to minimal definition
  logsEnabled: true
  logsConfigContainerCollectAll: true

  # TODO: Parametrize APM to minimal definition
  apmEnabled: true

  processAgentEnabled: true

  # TODO: See if DD env vars are actually needed with label/annotation setup and rest of config
  env:
    - name: DD_KUBELET_TLS_VERIFY
      value: "false"

  # TODO: Setup hostpath for dogstatsd unix socket
  volumes:
  - hostPath:
      path: /var/run/docker.sock
    name: dockersocket
  - hostPath:
      path: /proc
    name: procdir
  - hostPath:
      path: /var/log/pods
    name: logpath
  - hostPath:
      path: /sys/fs/cgroup
    name: cgroups
  - hostPath:
      path: /opt/datadog-agent/run
    name: pointdir
  - hostPath:
      path: /etc/passwd
    name: passwd

  # TODO: Setup additional autodiscovery where needed
  confd:
    kube_scheduler.yaml: |-
      init_config:
      instances:
        - prometheus_url: http://localhost:10251/metrics   
          leader_election: true
    disk.yaml: |-
      init_config:
      instances:
        - use_mount: false
    go_expvar.yaml: |-
      init_config:
      instances:
        metrics:
        - path: memstats/PauseTotalNs
          alias: go_expvar.gc.pause_time_in_ns
          type: rate
        - path: memstats/Alloc
        - path: memstats/Lookups
          type: rate
        - path: memstats/Mallocs
          type: counter
        - path: memstats/Frees
          type: rate
        - path: memstats/BySize/1/Mallocs
        - path: routes/get_.*/count
    network.yaml: |-
      init_config:
      instances:
        - collect_connection_state: false
    nginx_ingress_controller.yaml: |-
      init_config:
      instances:
        - prometheus_url: http://localhost:10254/metrics
    syslog.yaml: |-
      init_config:
      logs:
      - type: file
        path: /var/log/*.log
        service: "%%host%%"
        source: custom
      - type: file
        path: /var/log/messages
        service: "%%host%%"
        source: custom
      - type: file
        path: /var/log/syslog
        service: "%%host%%"
        source: custom
      - type: journald
        path: /var/log/journal/
        service: "%%host%%"
         
  resources:
    requests:
      cpu: 200m
      memory: 256Mi
    limits:
      cpu: 200m
      memory: 256Mi

clusterAgent:
  enabled: true
  containerName: cluster-agent
  image:
    repository: datadog/cluster-agent
    tag: 1.2.0
    pullPolicy: IfNotPresent

  # TODO: Draw this from secrets bucket
  token: "baz"

  replicas: 1
  metricsProvider:
    enabled: true
  clusterChecks:
    enabled: true

  # TODO: Consider cluster check configurations for autodiscovery
  # confd:
    kube_scheduler.yaml: |-
      init_config:
      instances:
        - prometheus_url: http://localhost:10251/metrics   
          leader_election: true
          # TODO: Needed?
          # tags:


  resources:
    requests:
      cpu: 200m
      memory: 256Mi
    limits:
      cpu: 200m
      memory: 256Mi

rbac:
  create: true
  serviceAccountName: default

tolerations: []

kubeStateMetrics:
  # TODO: Disable as this is already supported in env
  enabled: true

kube-state-metrics:
  rbac:
    # TODO: Specify SA name as this is already supported in env
    create: true
    serviceAccountName: default

daemonset:
  enabled: true
  useHostPID: true
  useHostPort: true

  # TODO: Consider injecting annotations for monitored pods
  # podAnnotations:

  # TODO: Are selectors really needed?
  # nodeSelector: {}

deployment:
  enabled: false
  replicas: 1
  affinity: {}
  tolerations: []

  service:
    type: ClusterIP
    annotations: {}

clusterchecksDeployment:
  enabled: false

  rbac:
    dedicated: false
    serviceAccountName: default

  replicas: 2

  resources:
    requests:
      cpu: 200m
      memory: 500Mi
    limits:
      cpu: 200m
      memory: 500Mi

  # TODO: Do we need selector?
  # nodeSelector: {}
  tolerations: []

  # TODO: Do we need env vars?
  # env:
  #   - name: <ENV_VAR_NAME>
  #     value: <ENV_VAR_VALUE>
